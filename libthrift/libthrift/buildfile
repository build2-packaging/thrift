# Configuration.
#
openssl  = $config.libthrift.openssl
libevent = $config.libthrift.libevent
zlib     = $config.libthrift.zlib

using autoconf

intf_libs = # Interface dependencies.
impl_libs = # Implementation dependencies.

# Required.
import intf_libs += libboost-numeric-conversion%lib{boost_numeric_conversion}
import intf_libs += libboost-algorithm%lib{boost_algorithm}
import intf_libs += libboost-scope-exit%lib{boost_scope_exit}
import intf_libs += libboost-locale%lib{boost_locale}
import intf_libs += libboost-tokenizer%lib{boost_tokenizer}

# Optional.
#
# Note that these are all really interface dependencies.
#
if $openssl
{
  import intf_libs += libssl%lib{ssl}
}
if $libevent
{
  import intf_libs += libevent%lib{event_core}
  import intf_libs += libevent%lib{event_extra}
  if $openssl
  {
    import intf_libs += libevent%lib{event_openssl}
  }
}
if $zlib
{
  import intf_libs += libz%lib{z}
}

# See: https://github.com/apache/thrift/blob/2a93df80f27739ccabb5b885cb12a8dc7595ecdf/lib/cpp/CMakeLists.txt#L31-L63
thrift_sources = \
   src/thrift/TApplicationException.cpp \
   src/thrift/TOutput.cpp \
   src/thrift/async/TAsyncChannel.cpp \
   src/thrift/async/TAsyncProtocolProcessor.cpp \
   src/thrift/async/TConcurrentClientSyncInfo.cpp \
   src/thrift/concurrency/ThreadManager.cpp \
   src/thrift/concurrency/TimerManager.cpp \
   src/thrift/processor/PeekProcessor.cpp \
   src/thrift/protocol/TBase64Utils.cpp \
   src/thrift/protocol/TDebugProtocol.cpp \
   src/thrift/protocol/TJSONProtocol.cpp \
   src/thrift/protocol/TMultiplexedProtocol.cpp \
   src/thrift/protocol/TProtocol.cpp \
   src/thrift/transport/TTransportException.cpp \
   src/thrift/transport/TFDTransport.cpp \
   src/thrift/transport/TSimpleFileTransport.cpp \
   src/thrift/transport/THttpTransport.cpp \
   src/thrift/transport/THttpClient.cpp \
   src/thrift/transport/THttpServer.cpp \
   src/thrift/transport/TSocket.cpp \
   src/thrift/transport/TSocketPool.cpp \
   src/thrift/transport/TServerSocket.cpp \
   src/thrift/transport/TTransportUtils.cpp \
   src/thrift/transport/TBufferTransports.cpp \
   src/thrift/transport/SocketCommon.cpp \
   src/thrift/server/TConnectedClient.cpp \
   src/thrift/server/TServerFramework.cpp \
   src/thrift/server/TSimpleServer.cpp \
   src/thrift/server/TThreadPoolServer.cpp \
   src/thrift/server/TThreadedServer.cpp
## See: https://github.com/apache/thrift/blob/2a93df80f27739ccabb5b885cb12a8dc7595ecdf/lib/cpp/CMakeLists.txt#L127-L132
thrift_sources += \
  src/thrift/concurrency/ThreadFactory.cpp \
  src/thrift/concurrency/Thread.cpp \
  src/thrift/concurrency/Monitor.cpp \
  src/thrift/concurrency/Mutex.cpp
## See: https://github.com/apache/thrift/blob/2a93df80f27739ccabb5b885cb12a8dc7595ecdf/lib/cpp/CMakeLists.txt#L65-L73
thrift_sources += \
  src/thrift/transport/TPipe.cpp \
  src/thrift/transport/TPipeServer.cpp \
  src/thrift/transport/TFileTransport.cpp

# See: https://github.com/apache/thrift/blob/2a93df80f27739ccabb5b885cb12a8dc7595ecdf/lib/cpp/CMakeLists.txt#L135-L140
thriftnb_sources = \
  src/thrift/server/TNonblockingServer.cpp \
  src/thrift/transport/TNonblockingServerSocket.cpp \
  src/thrift/async/TEvhttpServer.cpp \
  src/thrift/async/TEvhttpClientChannel.cpp

# See: https://github.com/apache/thrift/blob/2a93df80f27739ccabb5b885cb12a8dc7595ecdf/lib/cpp/CMakeLists.txt#L149-L156
thriftz_sources = \
  src/thrift/transport/TZlibTransport.cpp \
  src/thrift/protocol/THeaderProtocol.cpp \
  src/thrift/transport/THeaderTransport.cpp

# OS specific sources
## See: https://github.com/apache/thrift/blob/2a93df80f27739ccabb5b885cb12a8dc7595ecdf/lib/cpp/CMakeLists.txt#L76-L96
thrift_win_sources += \
  src/thrift/windows/TWinsockSingleton.cpp \
  src/thrift/windows/SocketPair.cpp \
  src/thrift/windows/GetTimeOfDay.cpp \
  src/thrift/windows/WinFcntl.cpp \
  src/thrift/windows/OverlappedSubmissionThread.cpp
thrift_unix_sources += \
  src/thrift/VirtualProfiling.cpp \
  src/thrift/server/TServer.cpp

# OpenSSL support
## See: https://github.com/apache/thrift/blob/2a93df80f27739ccabb5b885cb12a8dc7595ecdf/lib/cpp/CMakeLists.txt#L99-L117
##      https://github.com/apache/thrift/blob/2a93df80f27739ccabb5b885cb12a8dc7595ecdf/lib/cpp/CMakeLists.txt#L143-L147
thrift_openssl_sources += \
  src/thrift/transport/TSSLSocket.cpp \
  src/thrift/transport/TSSLServerSocket.cpp \
  src/thrift/transport/TWebSocketServer.cpp
thriftnb_openssl_sources += \
  src/thrift/transport/TNonblockingSSLServerSocket.cpp

thrift_all_sources = $thrift_sources \
                     $thrift_win_sources \
                     $thrift_unix_sources \
                     $thrift_openssl_sources

./: lib{thrift}
./: lib{thriftnb}: include = $libevent
./: lib{thriftz}:  include = $zlib

lib{thrift}: libul{thrift}
libul{thrift}: thrift/hxx{config} {hxx txx}{src/**} cxx{$thrift_sources} $impl_libs $intf_libs
libul{thrift}: cxx{$thrift_unix_sources}: include = ($cxx.target.class != 'windows')
libul{thrift}: cxx{$thrift_win_sources}: include = ($cxx.target.class == 'windows')
libul{thrift}: cxx{$thrift_openssl_sources}: include = $openssl

# libevent support
## See: https://github.com/apache/thrift/blob/2a93df80f27739ccabb5b885cb12a8dc7595ecdf/lib/cpp/CMakeLists.txt#L168-L181
lib{thriftnb}: libul{thriftnb}
libul{thriftnb}: thrift/hxx{config} cxx{$thriftnb_sources} lib{thrift} $impl_libs $intf_libs
libul{thriftnb}: cxx{$thriftnb_openssl_sources}: include = $openssl

# zlib support
## See: https://github.com/apache/thrift/blob/98be76fc033f1d66bcfd09d4a22b86e8061e89c2/lib/cpp/CMakeLists.txt#L183-L191
lib{thriftz}: libul{thriftz}
libul{thriftz}: thrift/hxx{config} cxx{$thriftz_sources} lib{thrift} $impl_libs $intf_libs

# Export all symbols for windows (MSVC part)
## See: https://github.com/apache/thrift/blob/2a93df80f27739ccabb5b885cb12a8dc7595ecdf/build/cmake/DefinePlatformSpecifc.cmake#L52-L56
for lib : thrift thriftnb thriftz
{
  libs{$lib}: def{$lib}: include = ($cxx.target.system == 'win32-msvc')
  def{$lib}: libul{$lib}
}

# Configuration
## Output to a 'thrift' folder, since includes expect this.
thrift/hxx{config}: in{config.h.in} fsdir{thrift/}
{
  autoconf.flavor = cmake
  autoconf.aliases = HAVE_AF_UNIX_H@HAVE_AFUNIX_H

  PACKAGE = \"thrift\"
  PACKAGE_NAME = $PACKAGE
  PACKAGE_VERSION = \""$version.major.$version.minor.$version.patch"\"
  PACKAGE_BUGREPORT = 0
  PACKAGE_TARNAME = 0
  PACKAGE_URL = 0
  PACKAGE_STRING = \""thrift $version.major.$version.minor.$version.patch"\"
}

# Build options.
#
cxx.poptions =+ "-I$out_base" "-I$src_base/src"

# FreeBSD workaround
## EAI_NODATA is obsolete and no longer defined in <netdb.h>, but thrift expects it to be.
## See https://github.com/freebsd/freebsd-src/blob/f2963b530e17c5eff66bc5f4860b1cd224d3d033/lib/libc/net/gai_strerror.c#L47-L65
if ($cxx.target.system == 'freebsd')
{
  obj{src/thrift/transport/TSocket}:
  {
    cxx.poptions += -DEAI_NODATA=7
  }
}

# The library use the "export all symbols" mechanism for functions and the
# explicit dllexport/dllimport for a few global variables (which cannot be
# auto-imported) in the main library; see thrift_export.h for details. Note
# that at least as of 0.16.0, this support is MSVC-only.
#
thrift_all_objs = $path.base($thrift_all_sources)
obja{$thrift_all_objs}: cxx.poptions += -DTHRIFT_STATIC_DEFINE
objs{$thrift_all_objs}: cxx.poptions += -Dthrift_EXPORTS

# Export all symbols for windows (MinGW part).
#
if ($cxx.target.system == 'mingw32')
{
  cxx.loptions += -Wl,--export-all-symbols
}

# Windows
## See: https://github.com/apache/thrift/blob/2a93df80f27739ccabb5b885cb12a8dc7595ecdf/lib/cpp/CMakeLists.txt#L163-L165
sys_libs =
switch $cxx.target.system
{
  case 'mingw32'
    sys_libs += -lws2_32
  case 'win32-msvc'
    sys_libs += ws2_32.lib
}

# Unix
## See: https://github.com/apache/thrift/blob/2a93df80f27739ccabb5b885cb12a8dc7595ecdf/lib/cpp/CMakeLists.txt#L119-L125
if ($cxx.target.system != 'win32-msvc')
{
  sys_libs += -pthread
}

cxx.libs += $sys_libs

# Export options.
#
lib{thrift}:
{
  cxx.export.poptions = "-I$out_base" "-I$src_base/src"
  cxx.export.libs     = $intf_libs $sys_libs
  export.metadata     = 1 libthrift
  libthrift.libevent  = [bool] $config.libthrift.libevent
  libthrift.openssl   = [bool] $config.libthrift.openssl
  libthrift.zlib      = [bool] $config.libthrift.zlib
}
liba{thrift}: cxx.export.poptions =+ -DTHRIFT_STATIC_DEFINE
lib{thriftnb thriftz}: cxx.export.libs = lib{thrift}

# For pre-releases use the complete version to make sure they cannot be used
# in place of another pre-release or the final version. See the version module
# for details on the version.* variable values.
#
for lib : thrift thriftnb thriftz
{
  if $version.pre_release
    lib{$lib}: bin.lib.version = "-$version.project_id"
  else
    lib{$lib}: bin.lib.version = "-$version.major.$version.minor"
}

# Install into the thrift/ subdirectory of, say, /usr/include/
# recreating subdirectories.
#
src/thrift/{hxx txx}{**} thrift/hxx{config}:
{
  install         = include/thrift/
  install.subdirs = true
}
