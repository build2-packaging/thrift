using autoconf

intf_libs = # Interface dependencies.
impl_libs = # Implementation dependencies.
# Required
import impl_libs += libboost-numeric-conversion%lib{boost_numeric_conversion}
import impl_libs += libboost-algorithm%lib{boost_algorithm}
import impl_libs += libboost-scope-exit%lib{boost_scope_exit}
import impl_libs += libboost-locale%lib{boost_locale}
import impl_libs += libboost-tokenizer%lib{boost_tokenizer}
# Optional
if $(config.$(project).with_openssl)
{
  import impl_libs += libssl%lib{ssl}
}

# "thriftcpp_sources"
## See: https://github.com/apache/thrift/blob/2a93df80f27739ccabb5b885cb12a8dc7595ecdf/lib/cpp/CMakeLists.txt#L31-L63
thrift_sources = \
   src/thrift/TApplicationException.cpp \
   src/thrift/TOutput.cpp \
   src/thrift/async/TAsyncChannel.cpp \
   src/thrift/async/TAsyncProtocolProcessor.cpp \
   src/thrift/async/TConcurrentClientSyncInfo.cpp \
   src/thrift/concurrency/ThreadManager.cpp \
   src/thrift/concurrency/TimerManager.cpp \
   src/thrift/processor/PeekProcessor.cpp \
   src/thrift/protocol/TBase64Utils.cpp \
   src/thrift/protocol/TDebugProtocol.cpp \
   src/thrift/protocol/TJSONProtocol.cpp \
   src/thrift/protocol/TMultiplexedProtocol.cpp \
   src/thrift/protocol/TProtocol.cpp \
   src/thrift/transport/TTransportException.cpp \
   src/thrift/transport/TFDTransport.cpp \
   src/thrift/transport/TSimpleFileTransport.cpp \
   src/thrift/transport/THttpTransport.cpp \
   src/thrift/transport/THttpClient.cpp \
   src/thrift/transport/THttpServer.cpp \
   src/thrift/transport/TSocket.cpp \
   src/thrift/transport/TSocketPool.cpp \
   src/thrift/transport/TServerSocket.cpp \
   src/thrift/transport/TTransportUtils.cpp \
   src/thrift/transport/TBufferTransports.cpp \
   src/thrift/transport/SocketCommon.cpp \
   src/thrift/server/TConnectedClient.cpp \
   src/thrift/server/TServerFramework.cpp \
   src/thrift/server/TSimpleServer.cpp \
   src/thrift/server/TThreadPoolServer.cpp \
   src/thrift/server/TThreadedServer.cpp
   # src/thrift/async/TConcurrentClientSyncInfo.h \

# "thriftcpp_threads_sources"
## See: https://github.com/apache/thrift/blob/2a93df80f27739ccabb5b885cb12a8dc7595ecdf/lib/cpp/CMakeLists.txt#L127-L132
thrift_sources += \
  src/thrift/concurrency/ThreadFactory.cpp \
  src/thrift/concurrency/Thread.cpp \
  src/thrift/concurrency/Monitor.cpp \
  src/thrift/concurrency/Mutex.cpp

# Windows CE incompatible sources
## See: https://github.com/apache/thrift/blob/2a93df80f27739ccabb5b885cb12a8dc7595ecdf/lib/cpp/CMakeLists.txt#L65-L73
if ($cxx.target.class != 'wince')
{
  thrift_sources += \
    src/thrift/transport/TPipe.cpp \
    src/thrift/transport/TPipeServer.cpp \
    src/thrift/transport/TFileTransport.cpp
}

# OS specific sources
## See: https://github.com/apache/thrift/blob/2a93df80f27739ccabb5b885cb12a8dc7595ecdf/lib/cpp/CMakeLists.txt#L76-L96
if ($cxx.target.class == 'windows')
{
  thrift_sources += \
    src/thrift/windows/TWinsockSingleton.cpp \
    src/thrift/windows/SocketPair.cpp \
    src/thrift/windows/GetTimeOfDay.cpp \
    src/thrift/windows/WinFcntl.cpp

  if ($cxx.target.class != 'wince')
  {
    thrift_sources += \
      src/thrift/windows/OverlappedSubmissionThread.cpp
  }
}
else
{
  thrift_sources += \
    src/thrift/VirtualProfiling.cpp \
    src/thrift/server/TServer.cpp
}

# OpenSSL support
## See: https://github.com/apache/thrift/blob/2a93df80f27739ccabb5b885cb12a8dc7595ecdf/lib/cpp/CMakeLists.txt#L99-L117
if $(config.$(project).with_openssl)
{
  thrift_sources += \
    src/thrift/transport/TSSLSocket.cpp \
    src/thrift/transport/TSSLServerSocket.cpp \
    src/thrift/transport/TWebSocketServer.cpp
    # src/thrift/transport/TWebSocketServer.h \
}

# Android support
## See: https://github.com/apache/thrift/blob/2a93df80f27739ccabb5b885cb12a8dc7595ecdf/lib/cpp/CMakeLists.txt#L119-L125
if ($cxx.target.class == 'unix')
{
  # TODO: Link pthread
}

lib{thrift}: hxx{thrift/config} hxx{src_cpp/**} cxx{$thrift_sources} $impl_libs $intf_libs

# Configuration
## Output to a 'thrift' folder, since includes expect this.
$out_base/thrift/hxx{config}: in{config.h.in}
{
  autoconf.flavor = cmake

  PACKAGE = "thrift"
  PACKAGE_BUGREPORT = "unset"
  PACKAGE_NAME = "thrift"
  PACKAGE_TARNAME = "unset"
  PACKAGE_URL = "unset"
  PACKAGE_VERSION = "0.16.0"
  PACKAGE_STRING = "unset"

  # TEMP
  BISON_USE_PARSER_H_EXTENSION = 0
  ## Missing from autoconf
  AI_ADDRCONFIG = 1
  STRERROR_R_CHAR_P = 0
  HAVE_SIGNAL_H = 0
  HAVE_POLL_H = 0
  HAVE_SYS_POLL_H = 0
  HAVE_SCHED_H = 0
  HAVE_STRINGS_H = 0
  HAVE_STRERROR_R = 0
  ## MISSPELLED
  HAVE_AF_UNIX_H = 0
}

hxx{export}@./: cxx.importable = false

# Build options.
#
cxx.poptions =+ "-I$out_base" "-I$src_base/src"

{hbmia obja}{*}: cxx.poptions += -DTHRIFT_STATIC_DEFINE
{hbmis objs}{*}: cxx.poptions += -Dthrift_EXPORTS

# Export options.
#
lib{thrift}:
{
  cxx.export.poptions = "-I$out_root" "-I$src_root"
  cxx.export.libs = $intf_libs
}

# liba{thrift}: cxx.export.poptions += -DLIBTHRIFT_STATIC
# libs{thrift}: cxx.export.poptions += -DLIBTHRIFT_SHARED

# For pre-releases use the complete version to make sure they cannot be used
# in place of another pre-release or the final version. See the version module
# for details on the version.* variable values.
#
if $version.pre_release
  lib{thrift}: bin.lib.version = "-$version.project_id"
else
  lib{thrift}: bin.lib.version = "-$version.major.$version.minor"

# Install into the libthrift/ subdirectory of, say, /usr/include/
# recreating subdirectories.
#
{hxx ixx txx}{src_cpp/thrift/**}:
{
  install         = include/thrift/
  install.subdirs = true
}
